# buildout这个段必需存在
[buildout]
# develop里面可以指定自己开发的egg，放在develop-eggs目录下，具体的我也没测试过。
# develop = myegg
# 每个buildout都要有一个parts列表，也可以为空。
# parts用来指定构建什么。如果parts中指定的段中还有parts的话，会递归构建。
develop = .
# 缓存存放
# download-cache = download
# parts 里面可以放多个段的名字，名字自定义，具体设置写在对应的配置段里面，比如 [tools]
parts = tools
  ls_root
# 这个是指pypi的镜像地址可以不写，默认是官网的。
# index = https://pypi.python.org/simple
# index = http://pypi.douban.com/simple
index = http://mirrors.aliyun.com/pypi/simple
# 固化egg的版本
# 这个指定的版本信息
versions = versions
extends = versions.cfg
#启用相对路径
# relative-paths = true
update-versions-file = versions.cfg
# 运行buildout的时候把所有的版本打印出来, 把它写到"versions.cfg"中就可以固化了:
show-picked-versions = true
# 使用mr.developer插件来组织大型的项目, 让开发更方便
extensions = mr.developer
# 这里是eggs包的名称
# 这里还有一种写法是像下面这个样子
# Flask==0.10.1
# 直接将版本信息写在这里也是可以的
# https://clickhouse.yandex/docs/en/interfaces/third-party_client_libraries/
# infi.clickhouse_orm
eggs = chardet 
  smart_open 
  requests 
  redis 
  configparser 
  logbook 
  sqlalchemy-clickhouse 
  pyhdfs 
  pymysql 
  pykafka 

  # bs4 
  # isort 
  # yapf 

# 对应parts里面的设置
[tools]
# 每一段都要指定一个recipe, recipe包含python的代码，用来安装这一段,
# zc.recipe.egg就是把一些把下面的egg安装到eggs目录中
# recipe 可以理解为配置项的解释器，这个可以自己实现，也可以使用现成的。这项决定了下面的配置项的功能实现。
recipe = zc.recipe.egg
# 指定了生成的python解释器的名称，位置在项目的bin目录下面
interpreter = sandbox
# 引用eggs包
eggs = ${buildout:eggs}

# 这个是扩展的引入路径，一般我会加上这个确保当前目录也在引用范围内
# 因为如果不加这个，那么当前目录下的一个模块的引用会提示找不到路径
# 可以理解成，需要编译出应用之后应该被加入sys.path的路径。
# extra-paths = ${buildout:directory}/eggs

[ls_root]
recipe = plone.recipe.command
command = ls -al `pwd`/eggs
update-command = ${:command}